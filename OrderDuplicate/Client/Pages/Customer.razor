@page "/Counter/{CounterSessionId:int}/customer";
@layout NoLayout
@using OrderDuplicate.Application.Common.Models
@using OrderDuplicate.Application.Features.Order.DTOs
@using OrderDuplicate.Application.Service
@using System.Text.Json
@using System.Net.WebSockets
@using Websocket.Client

@inject HttpClient Http
@implements IAsyncDisposable
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime


<style>
    .btn-group {
        display: flex;
        gap: 0.5rem;
    }

    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .table td {
        vertical-align: middle;
    }

    .text-end {
        text-align: right;
    }

    .table-info {
        background-color: #f8f9fa;
    }

    .font-weight-bold {
        font-weight: bold;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-30px);
        }

        60% {
            transform: translateY(-15px);
        }
    }

    .playful-center {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Full viewport height */
        text-align: center;
        background: linear-gradient(45deg, #ff9a9e, #fad0c4); /* Playful gradient background */
        color: white; /* Text color */
        font-family: 'Comic Sans MS', 'Chalkboard SE', sans-serif; /* Playful font */
        animation: bounce 2s infinite; /* Bouncing animation */
    }

        .playful-center h1 {
            font-size: 3rem; /* Large text size */
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); /* Add text shadow for depth */
        }

</style>
<div style="text-align: center;">
    <h1>Welcome at Counter: @CounterSessionId</h1>
</div>
@if (order == null && string.IsNullOrWhiteSpace(globalMessage))
{
    <p><em>Loading...</em></p>
}
else if (globalMessage != string.Empty)
{
    <div class="playful-center">
        <h1>@globalMessage</h1>
    </div>
}
else
{
    <h3>Order Details: @order.OrderNumber</h3>
    <div>
        <h5>Items:</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in order.Items)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td>
                        <td>@item.Price.ToString("C")</td>
                        <td>@(item.Quantity * item.Price)</td>
                    </tr>
                }
                <tr class="table-info font-weight-bold">
                    <td colspan="3" class="text-end" style="padding-right:70px;"><strong>Grand Total:</strong></td>
                    <td><strong>@order.TotalAmount.ToString("C")</strong></td>
                    <td></td>
                </tr>
            </tbody>
        </table>

    </div>
}


@if (showAddForm || editingItem != null)
{
    <div class="modal" tabindex="-1" style="display:block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Items</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingItem" OnValidSubmit="HandleSubmit">
                        <div class="form-group mb-3">
                            <label for="name">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editingItem.Name" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="quantity">Quantity</label>
                            <InputNumber id="quantity" class="form-control" @bind-Value="editingItem.Quantity" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="price">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="editingItem.Price" />
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public int CounterSessionId { get; set; }

    private OrderDto? order;
    private bool showAddForm;
    private OrderItemDto? editingItem;
    private string? webSoketUrl;
    private WebsocketClient? websocketClient;
    private string globalMessage = string.Empty;

    private async Task CreateClient()
    {
        webSoketUrl = await GetUrl();
        if (!string.IsNullOrWhiteSpace(webSoketUrl) && (websocketClient == null || !websocketClient.IsRunning))
        {
            websocketClient = new WebsocketClient(new Uri(webSoketUrl));
            websocketClient.ReconnectTimeout = null;
            websocketClient.MessageReceived.Subscribe(msg =>
            {
                if (msg != null && msg.Text != null)
                {
                    var message = msg.ToString();
                    if (message.Contains("Counter Closed!", StringComparison.OrdinalIgnoreCase))
                    {
                        globalMessage = message;
                        order = null;
                    }
                    else
                    {
                        globalMessage = string.Empty;
                        var result = JsonSerializer.Deserialize<OrderDto>(message);
                        if (order == null)
                        {
                            order = new();
                        }
                        if (order.Items == null)
                        {
                            order.Items = new();
                        }
                        if (result != null && !result.IsTempOrder)
                        {
                            order.OrderNumber = result.OrderNumber;
                            order.CounterPersonId = result.CounterPersonId;
                            order.Items = result?.Items;
                            editingItem = new();                           
                            showAddForm = false;
                            editingItem = null;
                        }
                        else
                        {
                            showAddForm = true;
                            editingItem = null;
                            editingItem = result?.Items?.FirstOrDefault();
                        }
                    }
                }
                StateHasChanged();
            });
            await websocketClient.Start();
        }
    }

    private async Task<string> GetUrl()
    {
        return await Http.GetStringAsync($"WebPubSub/Negotiate?counterId={CounterSessionId}");
    }

    protected override async Task OnInitializedAsync()
    {
        await CreateClient();
    }

    public async ValueTask DisposeAsync()
    {
        if (websocketClient != null && websocketClient.IsRunning)
        {
            await websocketClient.Stop(WebSocketCloseStatus.NormalClosure, "Closing connection");

        }
    }
    public void HandleSubmit()
    {

    }
}