@page "/Group"
@using System.Net.Http.Json
@using OrderDuplicate.Application.Model.Group
@using OrderDuplicate.Application.Features.Group.Dto
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<Group> Logger

<h2>Create Group</h2>

<EditForm Model="@newGroup" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group mb-3">
        <label for="groupName">Group Name</label>
        <InputText id="groupName" class="form-control" @bind-Value="newGroup.GroupName" />
    </div>
    
    <div class="form-group mb-3">
        <label for="counterId">Counter ID</label>
        <InputNumber id="counterId" class="form-control" @bind-Value="newGroup.CounterId" />
    </div>

    <button type="submit" class="btn btn-primary">Create Group</button>
    
    <p style="@messageStyles">
        @message
    </p>
</EditForm>

<h3>Existing Groups</h3>
@if (groups != null && groups.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Group Name</th>
                <th>Counter ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                <tr>
                    <td>@group.GroupName</td>
                    <td>@group.CounterId</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteGroup(group.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No groups found.</p>
}

@code {
    private GroupModel newGroup = new();
    private List<GroupDto> groups = new();
    private string? message;
    private string messageStyles = "visibility:hidden";

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        try
        {
            var response = await Http.GetAsync("Group");
            if (response.IsSuccessStatusCode)
            {
                groups = await response.Content.ReadFromJsonAsync<List<GroupDto>>() ?? new List<GroupDto>();
            }
            else
            {
                Logger.LogError("Failed to load groups. Status code: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading groups");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("Group", newGroup);
            if (response.IsSuccessStatusCode)
            {
                messageStyles = "color:green";
                message = "Group created successfully!";
                newGroup = new GroupModel(); // Reset the form
                await LoadGroups(); // Reload groups
            }
            else
            {
                messageStyles = "color:red";
                message = "Error creating group.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating group");
            messageStyles = "color:red";
            message = "There was an error processing your request.";
        }
    }

    private async Task DeleteGroup(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"Group/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadGroups(); // Reload groups after deletion
            }
            else
            {
                Logger.LogError("Failed to delete group. Status code: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting group");
        }
    }
}